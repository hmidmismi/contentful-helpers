{"version":3,"sources":["../src/index.ts","../src/lib/contentfulClient.ts","../src/utils/parsers.ts","../src/services/page.ts"],"sourcesContent":["// src/index.ts\nexport { fetchPage, fetchPages, fetchPageById } from '@/services/page';\n\n// types\nexport * from './types';\n\n// utils\nexport * from './utils';\n","import { createClient } from 'contentful';\n\nconst { CONTENTFUL_SPACE_ID, CONTENTFUL_ACCESS_TOKEN, CONTENTFUL_PREVIEW_ACCESS_TOKEN } = process.env;\n\nif (!CONTENTFUL_SPACE_ID) {\n  throw new Error('CONTENTFUL_SPACE_ID is not defined');\n}\n\nif (!CONTENTFUL_ACCESS_TOKEN) {\n  throw new Error('CONTENTFUL_ACCESS_TOKEN is not defined');\n}\n\nif (!CONTENTFUL_PREVIEW_ACCESS_TOKEN) {\n  throw new Error('CONTENTFUL_PREVIEW_ACCESS_TOKEN is not defined');\n}\n\nconst client = createClient({\n  space: CONTENTFUL_SPACE_ID,\n  accessToken: CONTENTFUL_ACCESS_TOKEN,\n});\n\nconst previewClient = createClient({\n  space: CONTENTFUL_SPACE_ID,\n  accessToken: CONTENTFUL_PREVIEW_ACCESS_TOKEN,\n  host: 'https://preview-brooklynaikikai.netlify.app',\n});\n\nexport const contentfulClient = (options?: { preview?: boolean }) => {\n  const { preview = false } = options || {}; // Handle undefined options gracefully\n\n  if (preview) {\n    return previewClient;\n  }\n\n  return client;\n};\n","// src/utils/utils\n\nimport { Entry, Asset, AssetLink } from 'contentful';\n\nimport { TypePageSkeleton, ImageType, PageType } from '@/types';\n\ntype PageEntry = Entry<TypePageSkeleton, undefined, string>;\n\nexport function parseContentfulContentImage(asset?: Asset<undefined, string> | { sys: AssetLink }): ImageType | null {\n  if (!asset) {\n    return null;\n  }\n\n  if (!('fields' in asset)) {\n    return null;\n  }\n\n  return {\n    id: asset.sys.id,\n    src: asset.fields.file?.url || '',\n    alt: asset.fields.description || '',\n    width: asset.fields.file?.details.image?.width || 0,\n    height: asset.fields.file?.details.image?.height || 0,\n  };\n}\n\nexport function parseContentfulPage(pageEntry?: PageEntry): PageType | null {\n  if (!pageEntry) {\n    return null;\n  }\n\n  // Guarantee \"images\" is an array, though possibly an empty array\n  const images =\n    pageEntry.fields.images?.map(parseContentfulContentImage).filter((img): img is ImageType => img !== null) || [];\n\n  return {\n    id: pageEntry.sys.id,\n    title: pageEntry.fields.title || '',\n    slug: pageEntry.fields.slug || '',\n    body: pageEntry.fields.body || null,\n    images,\n  };\n}\n","// src/services/page\n\nimport { contentfulClient } from '@/lib';\nimport { TypePageSkeleton, PageType } from '@/types';\nimport { parseContentfulPage } from '@/utils';\n\ntype FetchPageOptions = {\n  slug: string;\n  // preview: boolean;\n};\n\nexport async function fetchPages(): Promise<PageType[]> {\n  const contentful = contentfulClient();\n\n  const pagesResult = await contentful.getEntries<TypePageSkeleton>({\n    content_type: 'page',\n    include: 2,\n    order: ['fields.title'],\n  });\n\n  return pagesResult.items.map((pageEntry) => parseContentfulPage(pageEntry) as PageType);\n}\n\nexport async function fetchPage({ slug }: FetchPageOptions): Promise<PageType | null> {\n  const contentful = contentfulClient();\n\n  const pagesResult = await contentful.getEntries<TypePageSkeleton>({\n    content_type: 'page',\n    'fields.slug': slug,\n    include: 2,\n  });\n\n  return parseContentfulPage(pagesResult.items[0]);\n}\n\nexport async function fetchPageById({ id }: { id: string }): Promise<PageType | null> {\n  const contentful = contentfulClient();\n\n  const pageResult = await contentful.getEntry<TypePageSkeleton>(id, {\n    include: 2,\n  });\n\n  return parseContentfulPage(pageResult);\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,wBAA6B;AAE7B,IAAM,EAAE,qBAAqB,yBAAyB,gCAAgC,IAAI,QAAQ;AAElG,IAAI,CAAC,qBAAqB;AACxB,QAAM,IAAI,MAAM,oCAAoC;AACtD;AAEA,IAAI,CAAC,yBAAyB;AAC5B,QAAM,IAAI,MAAM,wCAAwC;AAC1D;AAEA,IAAI,CAAC,iCAAiC;AACpC,QAAM,IAAI,MAAM,gDAAgD;AAClE;AAEA,IAAM,aAAS,gCAAa;AAAA,EAC1B,OAAO;AAAA,EACP,aAAa;AACf,CAAC;AAED,IAAM,oBAAgB,gCAAa;AAAA,EACjC,OAAO;AAAA,EACP,aAAa;AAAA,EACb,MAAM;AACR,CAAC;AAEM,IAAM,mBAAmB,CAAC,YAAoC;AACnE,QAAM,EAAE,UAAU,MAAM,IAAI,WAAW,CAAC;AAExC,MAAI,SAAS;AACX,WAAO;AAAA,EACT;AAEA,SAAO;AACT;;;AC3BO,SAAS,4BAA4B,OAAyE;AARrH;AASE,MAAI,CAAC,OAAO;AACV,WAAO;AAAA,EACT;AAEA,MAAI,EAAE,YAAY,QAAQ;AACxB,WAAO;AAAA,EACT;AAEA,SAAO;AAAA,IACL,IAAI,MAAM,IAAI;AAAA,IACd,OAAK,WAAM,OAAO,SAAb,mBAAmB,QAAO;AAAA,IAC/B,KAAK,MAAM,OAAO,eAAe;AAAA,IACjC,SAAO,iBAAM,OAAO,SAAb,mBAAmB,QAAQ,UAA3B,mBAAkC,UAAS;AAAA,IAClD,UAAQ,iBAAM,OAAO,SAAb,mBAAmB,QAAQ,UAA3B,mBAAkC,WAAU;AAAA,EACtD;AACF;AAEO,SAAS,oBAAoB,WAAwC;AA1B5E;AA2BE,MAAI,CAAC,WAAW;AACd,WAAO;AAAA,EACT;AAGA,QAAM,WACJ,eAAU,OAAO,WAAjB,mBAAyB,IAAI,6BAA6B,OAAO,CAAC,QAA0B,QAAQ,UAAS,CAAC;AAEhH,SAAO;AAAA,IACL,IAAI,UAAU,IAAI;AAAA,IAClB,OAAO,UAAU,OAAO,SAAS;AAAA,IACjC,MAAM,UAAU,OAAO,QAAQ;AAAA,IAC/B,MAAM,UAAU,OAAO,QAAQ;AAAA,IAC/B;AAAA,EACF;AACF;;;AC/BA,SAAsB,aAAkC;AAAA;AACtD,UAAM,aAAa,iBAAiB;AAEpC,UAAM,cAAc,MAAM,WAAW,WAA6B;AAAA,MAChE,cAAc;AAAA,MACd,SAAS;AAAA,MACT,OAAO,CAAC,cAAc;AAAA,IACxB,CAAC;AAED,WAAO,YAAY,MAAM,IAAI,CAAC,cAAc,oBAAoB,SAAS,CAAa;AAAA,EACxF;AAAA;AAEA,SAAsB,UAAU,IAAsD;AAAA,6CAAtD,EAAE,KAAK,GAA+C;AACpF,UAAM,aAAa,iBAAiB;AAEpC,UAAM,cAAc,MAAM,WAAW,WAA6B;AAAA,MAChE,cAAc;AAAA,MACd,eAAe;AAAA,MACf,SAAS;AAAA,IACX,CAAC;AAED,WAAO,oBAAoB,YAAY,MAAM,CAAC,CAAC;AAAA,EACjD;AAAA;AAEA,SAAsB,cAAc,IAAkD;AAAA,6CAAlD,EAAE,GAAG,GAA6C;AACpF,UAAM,aAAa,iBAAiB;AAEpC,UAAM,aAAa,MAAM,WAAW,SAA2B,IAAI;AAAA,MACjE,SAAS;AAAA,IACX,CAAC;AAED,WAAO,oBAAoB,UAAU;AAAA,EACvC;AAAA;","names":[]}